<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="https://shusei-e.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://shusei-e.github.io/" rel="alternate" type="text/html" /><updated>2025-03-22T07:34:41-04:00</updated><id>https://shusei-e.github.io/feed.xml</id><title type="html">Shusei Eshima</title><subtitle>Shusei Eshima is a PhD student at Harvard University. His interests are political methodology and comparative politics.</subtitle><author><name>Shusei Eshima</name></author><entry><title type="html">Yet another expression of Bernoulli distribution</title><link href="https://shusei-e.github.io/statistics/Bernoulli/" rel="alternate" type="text/html" title="Yet another expression of Bernoulli distribution" /><published>2019-09-03T00:00:00-04:00</published><updated>2019-09-03T00:00:00-04:00</updated><id>https://shusei-e.github.io/statistics/Bernoulli</id><content type="html" xml:base="https://shusei-e.github.io/statistics/Bernoulli/"><![CDATA[<script type="text/javascript" async="" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_CHTML">
</script>

<p>The probability mass function of Bernoulli distribution is</p>

<p><span style="font-size:1.0em; line-height:0%">
\(\begin{align}
f(k) = p^k (1-p)^{1-k}.
\end{align}\)
</span></p>

<p>If we take the proportion of it,</p>

<p><span style="font-size:1.0em; line-height:0%">
\(\begin{align}
f(k) \propto \frac{f(k)}{f(0)} = \frac{p^k (1-p)^{1-k}}{(1-p)} = \left( \frac{p}{1-p}  \right)^k.
\end{align}\)
</span></p>

<p>Note that \(f(0)\) works here as a constant.</p>]]></content><author><name>Shusei Eshima</name></author><category term="Statistics" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">アメリカに引っ越す</title><link href="https://shusei-e.github.io/%E6%97%A5%E6%9C%AC%E8%AA%9E%E8%A8%98%E4%BA%8B/MovingToUS/" rel="alternate" type="text/html" title="アメリカに引っ越す" /><published>2018-08-08T00:00:00-04:00</published><updated>2018-08-08T00:00:00-04:00</updated><id>https://shusei-e.github.io/%E6%97%A5%E6%9C%AC%E8%AA%9E%E8%A8%98%E4%BA%8B/MovingToUS</id><content type="html" xml:base="https://shusei-e.github.io/%E6%97%A5%E6%9C%AC%E8%AA%9E%E8%A8%98%E4%BA%8B/MovingToUS/"><![CDATA[<h2 id="出発まで">出発まで</h2>

<h3 id="ビザ">ビザ</h3>
<ul>
  <li>F1ビザの場合、I-20が届いてからすぐに手続きを始めた方が良い
    <ul>
      <li>6月の頭はそれなりに空いている</li>
    </ul>
  </li>
  <li>書類の作成には相当時間がかかるので、その時間も考慮する必要がある
    <ul>
      <li>写真をアップロードするセクションがあるが、結局使われるのは大使館に持参する写真なので、アップロードする方は最悪規定に沿っていなくても大丈夫</li>
      <li>銀行の残高証明書も持って行ったが、大学から奨学金などがもらえる場合は不要だったかもしれない</li>
    </ul>
  </li>
  <li>I-20は毎回の入国時に必要になるので、大切に保管・携帯</li>
</ul>

<h3 id="住民票">住民票</h3>
<ul>
  <li>税金などを考えるのなら、国外転出すべき</li>
  <li>一時帰国の際の健康保険は、日本の滞在先(ホテルなどではなく)があれば住民票を戻すことで可能
    <ul>
      <li>保険料は月極め、月末に住民票があるかで計算される</li>
      <li>住民票は住所があるところでしか作れないので、友人宅での「同居人」の扱いも検討する</li>
      <li>その場合必要な書類が変わって来るので注意</li>
    </ul>
  </li>
</ul>

<h3 id="年金">年金</h3>
<ul>
  <li>住民票あり+大学休学: 両親を代理人として学生免除の申請</li>
  <li>住民票あり+大学退学: 源泉徴収票を元に日本での所得を計算して所得による免除</li>
  <li>住民票なし: 任意加入できる、免除などはない</li>
</ul>

<h3 id="マイナンバー">マイナンバー</h3>
<ul>
  <li>番号自体は残る</li>
</ul>

<h3 id="荷物を送る">荷物を送る</h3>
<ul>
  <li>郵便局のEMSが(それなりに)安くて早い(東海岸で税関に止まらなければ5日程度)
    <ul>
      <li>品目を書かないといけないので、どの箱に何が入っているかをメモしておく</li>
      <li>万が一紛失された際に備えるならば、差出人は自分自身じゃない方が手続きしやすい(らしい)</li>
      <li>船便にするともっと安いけど無くなることもあるとか</li>
    </ul>
  </li>
</ul>

<h2 id="到着後">到着後</h2>

<h3 id="i-20の登録">I-20の登録</h3>
<ul>
  <li>International Officeに持って行ってサインをもらう</li>
</ul>

<h3 id="simカードの入手">SIMカードの入手</h3>
<ul>
  <li>SIMフリーの携帯があればAT&amp;Tなどでプリペイド式のカードをすぐ入手できる</li>
</ul>

<h3 id="銀行口座の開設">銀行口座の開設</h3>
<ul>
  <li>Bank of AmericaはI-20とパスポートだけで開設できた</li>
  <li>一定金額口座($1500-)にあればクレジットカードの発行もできるとのこと
    <ul>
      <li>日本からの送金にはTransferWiseが便利</li>
      <li>念のためにキャッシュパスポートも準備しておくと、いざという時に送金に使える</li>
    </ul>
  </li>
  <li>Overdraftに注意</li>
  <li>クレジットカードは色々と面倒
    <ul>
      <li>Credit card historyに影響するので支払いは滞りなく行いたい</li>
    </ul>
  </li>
  <li>クレジットカードの支払いを自動化
    <ul>
      <li>銀行によってはワンクリックでできるらしいが、Bank of Americaの場合は設定が必要だった</li>
      <li>まず初回のclosing dataを迎えるのを待つ</li>
      <li>Bill Pay Centerから適当な額でクレジットカードに対して支払いを行う</li>
      <li>Payment Centerに支払い先の一覧が出てくる (先ほどの支払いはキャンセルしてもOK)</li>
      <li>eBillsが届いていたら、eBillsから支払いを設定することができる (届いていなければ電話する)</li>
    </ul>
  </li>
</ul>

<h3 id="家具などの入手">家具などの入手</h3>
<ul>
  <li>Amazonでも色々手に入る</li>
  <li>ベッド
    <ul>
      <li>Twin: 日本のシングルぐらいのサイズ</li>
    </ul>
  </li>
  <li>照明
    <ul>
      <li>家によっては天井に照明がない</li>
    </ul>
  </li>
</ul>

<h3 id="税">税</h3>
<ul>
  <li>F-1ビザで、大学からstipendをもらっている場合は、Individual Taxpayer Identification Numbersが必要なので、Form W-7を作成する</li>
  <li>RAとかで働くのなら、Social Security Numberが必要になる</li>
  <li>大学のOfficeに書類を提出したりと手続きが必要
    <ul>
      <li>ITINが届いたら、GLACIERというシステムの情報の更新と書類の再提出が必要になる</li>
    </ul>
  </li>
</ul>

<h3 id="運転免許証">運転免許証</h3>
<ul>
  <li>州によって違う</li>
  <li>書類の準備
    <ul>
      <li>住所の証明 (Bank statementが一番簡単だけど、ない場合は大学からの学費の請求書など)</li>
      <li>SSN Denial Letter: オフィスに行かないともらえない</li>
      <li>Passport、I-20など</li>
    </ul>
  </li>
  <li>試験の準備をする
    <ul>
      <li><a href="https://driving-tests.org/">このサイト</a>に練習問題があるので解く</li>
      <li>17時にRMV Officeが閉まるのなら、15時ギリギリになると再受験させてもらえなくなるので注意</li>
      <li>問題はランダムに表示されるので、難しい回と簡単な回があるらしい</li>
    </ul>
  </li>
  <li>路上試験を受ける
    <ul>
      <li>自動車学校を経由すると、予約の代行をしてくれるので便利</li>
      <li>日本にない試験科目(3-point-turn)があるので、練習が多少は必要</li>
    </ul>
  </li>
</ul>

<h3 id="国際免許証">国際免許証</h3>
<ul>
  <li>住むなら、各州で運転免許証を取らないといけないが、一応日本からも持参した</li>
  <li>免許更新センターなどで入手可能</li>
</ul>

<h3 id="social-security-number">Social Security Number</h3>
<ul>
  <li>RAなどとして働くなら必要</li>
  <li>雇用する機関(〇〇センターなど)からレターをもらい、それをInternational Officeに持って行き更にレターをもらう</li>
</ul>]]></content><author><name>Shusei Eshima</name></author><category term="日本語記事" /><summary type="html"><![CDATA[出発まで]]></summary></entry><entry><title type="html">Debug, Debug, Debug</title><link href="https://shusei-e.github.io/tips/DebugDebugDebug/" rel="alternate" type="text/html" title="Debug, Debug, Debug" /><published>2018-06-22T00:00:00-04:00</published><updated>2018-06-22T00:00:00-04:00</updated><id>https://shusei-e.github.io/tips/DebugDebugDebug</id><content type="html" xml:base="https://shusei-e.github.io/tips/DebugDebugDebug/"><![CDATA[<p>We would like to minimize bugs when we write code. If we encounter errors, we know something is going wrong, but some serious bugs don’t stop the code.</p>

<h2 id="bug">Bug??</h2>
<ul>
  <li>Values go wrong even if you are sure that you implemented the code correctly</li>
</ul>

<h2 id="write-a-debug-function">Write a debug function</h2>
<ul>
  <li>Write a debug function and try the code with a tiny data</li>
  <li>Make sure all counters work well</li>
  <li>Debug functions need to test:
    <ul>
      <li>Each file (class)</li>
      <li>Entire code (can the program give you a desirable output?)</li>
      <li>Test codes are important because you will forget what you’ve done if your project get longer</li>
    </ul>
  </li>
  <li>Test with both small and large test datasets</li>
</ul>

<h2 id="coding">Coding</h2>
<ul>
  <li>Break your function into small parts and make sure each component works fine.</li>
  <li>Introduce a linting tool: <a href="https://github.com/w0rp/ale">ALE</a> in Vim</li>
  <li>Be careful especially when you copy and paste a part of code</li>
</ul>

<h2 id="write-a-documentation">Write a documentation</h2>
<ul>
  <li>R: <a href="https://github.com/Shusei-E/Code_Tips/blob/master/R/devtools.md">devtools</a></li>
  <li>Python: <a href="https://github.com/Shusei-E/Code_Tips/tree/master/Python">Sphinx</a></li>
  <li>C++: Doxygen</li>
</ul>

<h2 id="rewrite">Rewrite</h2>
<p>Do not hesitate to rewrite the entire code. Rewriting takes shorter time than debugging unorganized code (which could be infinite).</p>

<h2 id="case-studies">Case Studies</h2>

<h3 id="number-order-and-text-order">Number order and text order</h3>
<p>When I read text files, the order was <code class="language-plaintext highlighter-rouge">text_1</code>, <code class="language-plaintext highlighter-rouge">text_10</code>, <code class="language-plaintext highlighter-rouge">text_101</code>, <code class="language-plaintext highlighter-rouge">text_102</code>. However, in a csv file that stores covariates, the order was <code class="language-plaintext highlighter-rouge">text_1</code>, <code class="language-plaintext highlighter-rouge">text_2</code>, <code class="language-plaintext highlighter-rouge">text_3</code>. There was a mismatch.</p>

<h3 id="reduce-the-number-of-member-variables">Reduce the number of member variables</h3>
<ul>
  <li>In C++, defining <code class="language-plaintext highlighter-rouge">int</code> and <code class="language-plaintext highlighter-rouge">double</code> as member variables slows down the code.</li>
</ul>]]></content><author><name>Shusei Eshima</name></author><category term="Tips" /><summary type="html"><![CDATA[We would like to minimize bugs when we write code. If we encounter errors, we know something is going wrong, but some serious bugs don’t stop the code.]]></summary></entry><entry><title type="html">Faster Log Gamma Calculation</title><link href="https://shusei-e.github.io/machine%20learning/FasterLogGamma/" rel="alternate" type="text/html" title="Faster Log Gamma Calculation" /><published>2017-09-21T00:00:00-04:00</published><updated>2017-09-21T00:00:00-04:00</updated><id>https://shusei-e.github.io/machine%20learning/FasterLogGamma</id><content type="html" xml:base="https://shusei-e.github.io/machine%20learning/FasterLogGamma/"><![CDATA[<script type="text/javascript" async="" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_CHTML">
</script>

<p>We sometimes encounter the calculation of</p>

<p><span style="font-size:1.0em; line-height:0%">
\(\newcommand{\Ga}{\Gamma}
\begin{align}
\log \frac{\Ga (\alpha + n)}{\Ga (\alpha)}.
\end{align}\)
</span></p>

<p>If \(n\) is small, there is a faster calculation. We use the property of Gamma function, \(\Gamma(x+1) = x \Gamma (x)\).</p>

<p><span style="font-size:1.0em; line-height:0%">
\(\newcommand{\Ga}{\Gamma}
\begin{align}
&amp;\quad \log \frac{\Ga (\alpha + n)}{\Ga (\alpha)} \\
&amp;= \log \frac{(\alpha + n - 1) \Ga (\alpha + n - 1)}{\Ga (\alpha)} \\
&amp;= \log \frac{(\alpha + n -1) (\alpha + n -2) \Ga (\alpha + n -2) }{\Ga (\alpha)} \\
&amp;= \log \frac{(\alpha + n -1) (\alpha + n -2) \cdots (\alpha) \Ga (\alpha)}{\Ga (\alpha)} \\
&amp;= \log (\alpha + n -1) (\alpha + n -2) \cdots (\alpha)\\
&amp;= \log \prod_{m=1}^{n} (\alpha + n - m)
\end{align}\)
</span></p>

<p>Example code in Cython:</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cdef</span> <span class="n">extern</span> <span class="k">from</span> <span class="s">"math.h"</span><span class="p">:</span>
   <span class="n">double</span> <span class="n">log</span> <span class="p">(</span><span class="n">double</span> <span class="n">x</span><span class="p">)</span>
   <span class="n">double</span> <span class="n">lgamma</span> <span class="p">(</span><span class="n">double</span> <span class="n">x</span><span class="p">)</span>

<span class="n">cdef</span> <span class="n">double</span> <span class="n">gammaln_sum</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">[</span><span class="n">ftype_t</span><span class="p">,</span> <span class="n">ndim</span><span class="o">=</span><span class="mi">1</span><span class="p">]</span> <span class="n">array1</span><span class="p">,</span>
                        <span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">[</span><span class="n">ftype_t</span><span class="p">,</span> <span class="n">ndim</span><span class="o">=</span><span class="mi">1</span><span class="p">]</span> <span class="n">array2</span><span class="p">):</span>
    <span class="c1"># (special.gammaln( alpha_s + n_s_temp ) - special.gammaln( alpha_s )).sum()
</span>    <span class="n">cdef</span> <span class="n">double</span> <span class="n">value</span> <span class="o">=</span> <span class="mf">0.0</span>
    <span class="n">cdef</span> <span class="nb">int</span> <span class="n">i</span>
    <span class="n">cdef</span> <span class="nb">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">array1</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="c1"># length of array
</span>    <span class="n">cdef</span> <span class="nb">int</span> <span class="n">m</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">array2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">18</span><span class="p">:</span>
            <span class="c1"># low frequency words
</span>            <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">array2</span><span class="p">[</span><span class="n">i</span><span class="p">])):</span>
                <span class="n">value</span> <span class="o">+=</span> <span class="n">log</span><span class="p">(</span><span class="n">array1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">m</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">value</span> <span class="o">+=</span> <span class="n">lgamma</span><span class="p">(</span><span class="n">array1</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">-</span> <span class="n">lgamma</span><span class="p">(</span><span class="n">array2</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>

    <span class="k">return</span> <span class="n">value</span>
</code></pre></div></div>

<p>In C++:</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="n">CstmCpp</span><span class="o">::</span><span class="n">calc_loglik_doc_second_term</span><span class="p">(</span><span class="kt">int</span> <span class="o">&amp;</span><span class="n">doc_id</span><span class="p">,</span> <span class="kt">int</span> <span class="o">&amp;</span><span class="n">word_id</span><span class="p">,</span> <span class="n">SparseVector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">n_k_doc</span><span class="p">){</span>
  <span class="c1">// compute_second_term_of_log_probability_document</span>
  
  <span class="kt">double</span> <span class="n">alpha_k</span> <span class="o">=</span> <span class="n">calc_alpha_word_given_doc</span><span class="p">(</span><span class="n">doc_id</span><span class="p">,</span> <span class="n">word_id</span><span class="p">);</span>
  <span class="kt">int</span> <span class="n">n_k_w</span> <span class="o">=</span> <span class="n">n_k_doc</span><span class="p">.</span><span class="n">coeffRef</span><span class="p">(</span><span class="n">word_id</span><span class="p">);</span> <span class="c1">// get_word_count_in_doc()</span>

  <span class="k">if</span><span class="p">(</span><span class="n">n_k_w</span> <span class="o">&gt;</span> <span class="mi">18</span><span class="p">){</span>
    <span class="k">return</span> <span class="n">lgamma</span><span class="p">(</span><span class="n">alpha_k</span> <span class="o">+</span> <span class="n">n_k_w</span><span class="p">)</span> <span class="o">-</span> <span class="n">lgamma</span><span class="p">(</span><span class="n">alpha_k</span><span class="p">);</span>
  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="kt">double</span> <span class="n">temp</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n_k_w</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
      <span class="n">temp</span> <span class="o">+=</span> <span class="n">log</span><span class="p">(</span><span class="n">alpha_k</span> <span class="o">+</span> <span class="n">i</span><span class="p">);</span> 
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">temp</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Shusei Eshima</name></author><category term="Machine Learning" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Bayesian Multiple Regression</title><link href="https://shusei-e.github.io/bayesian%20analysis/BayesianMultipleRegression/" rel="alternate" type="text/html" title="Bayesian Multiple Regression" /><published>2017-08-27T00:00:00-04:00</published><updated>2017-08-27T00:00:00-04:00</updated><id>https://shusei-e.github.io/bayesian%20analysis/BayesianMultipleRegression</id><content type="html" xml:base="https://shusei-e.github.io/bayesian%20analysis/BayesianMultipleRegression/"><![CDATA[<script type="text/javascript" async="" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_CHTML">
</script>

<p>We can replace normal multiple regression with Bayesian Multiple Regression.</p>

<h2 id="model-and-data">Model and Data</h2>
<p>First, we need to create simulation data. Let’s consider this model:</p>

<p><span style="font-size:1.0em; line-height:0%">
\(\newcommand{\Normal}{\mathcal{N}}
\newcommand{\Ga}{\rm Gamma}
\begin{align}
y_i &amp;\sim \Normal(\beta_0 + \beta_1 x_{1i} + \beta_2 x_{2i},\  1/ \tau ) \\
\beta_0 &amp;\sim \Normal (\mu_0,\ 1/ \tau_0 ) \\
\beta_1 &amp;\sim \Normal (\mu_1,\ 1/ \tau_1 ) \\
\beta_2 &amp;\sim \Normal (\mu_2,\ 1/ \tau_2 )\\
\tau &amp;\sim \Ga (\alpha, \beta)
\end{align}\)
</span></p>

<p>Generate data with R:</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">num_data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1000</span><span class="w">
</span><span class="n">N</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">num_data</span><span class="w">

</span><span class="n">age</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rnorm</span><span class="p">(</span><span class="n">num_data</span><span class="p">,</span><span class="w"> </span><span class="n">mean</span><span class="o">=</span><span class="m">50</span><span class="p">,</span><span class="w"> </span><span class="n">sd</span><span class="o">=</span><span class="m">15</span><span class="p">)</span><span class="w">
</span><span class="n">income</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rnorm</span><span class="p">(</span><span class="n">num_data</span><span class="p">,</span><span class="w"> </span><span class="n">mean</span><span class="o">=</span><span class="m">500</span><span class="p">,</span><span class="w"> </span><span class="n">sd</span><span class="o">=</span><span class="m">100</span><span class="p">)</span><span class="w"> </span><span class="c1"># using Normal might be wrong, but just for simulation data</span><span class="w">
</span><span class="n">data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">age</span><span class="p">,</span><span class="w"> </span><span class="n">income</span><span class="p">)</span><span class="w">
</span><span class="n">covariates</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.matrix</span><span class="p">(</span><span class="n">data</span><span class="p">[,</span><span class="nf">c</span><span class="p">(</span><span class="s2">"age"</span><span class="p">,</span><span class="w"> </span><span class="s2">"income"</span><span class="p">)])</span><span class="w">


</span><span class="c1">## Muliple Regression</span><span class="w">
</span><span class="n">true_beta0</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1.5</span><span class="w">
</span><span class="n">true_beta1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">2.8</span><span class="w">
</span><span class="n">true_beta2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">-1.2</span><span class="w">
</span><span class="n">tau_true</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="n">betaX</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">true_beta1</span><span class="p">,</span><span class="w"> </span><span class="n">true_beta2</span><span class="p">)</span><span class="w">
</span><span class="n">data</span><span class="o">$</span><span class="n">Y</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">true_beta0</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">covariates</span><span class="w"> </span><span class="o">%*%</span><span class="w"> </span><span class="n">betaX</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">rnorm</span><span class="p">(</span><span class="n">num_data</span><span class="p">,</span><span class="w"> </span><span class="n">sd</span><span class="o">=</span><span class="m">1</span><span class="o">/</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">tau_true</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<h2 id="likelihood-function">Likelihood function</h2>
<p>Likelihood function is simple:</p>

<p><span style="font-size:1.0em; line-height:0%">
\(\newcommand{\Normal}{\mathcal{N}}
\begin{align}
\mathcal{L} = \prod_{i=1}^N \Normal(\beta_0 + \beta_1 x_{1i} + \beta_2 x_{2i},\  1/ \tau )
\end{align}\)
</span></p>

<h2 id="update-equations">Update Equations</h2>

<p><strong>Update for \(\beta_0\) (intercept)</strong></p>

<p><span style="font-size:1.0em; line-height:0%">
\(\newcommand{\Normal}{\mathcal{N}}
\begin{align}
&amp;p(\beta_0 | \beta_1,\beta_2, \tau, y, x, \mu_0,\mu_1,\mu_2 \tau_0,\tau_1,\tau_2,\alpha,\beta)\\
&amp;\propto p(\beta_0 , \beta_1,\beta_2, \tau, y, x, \mu_0,\mu_1,\mu_2 \tau_0,\tau_1,\tau_2,\alpha,\beta)\\
&amp;= p(y|\beta_0,\beta_1,\beta_2,\tau,x)\ p(\beta_0|\mu_0,\tau_0)\ p(\beta_1|\mu_1,\tau_1)\ p(\beta_2|\mu_2,\tau_2)\ p(x) \\
&amp;\propto p(y|\beta_0, \beta_1, \beta_2, \tau, x)\ p(\beta_0 | \mu_0, \tau_0)\\
&amp;= \Normal(\mu_0,\ 1/\tau_0)\ \prod_{i=1}^N (\beta_0 + \beta_1 x_{1i} + \beta_2 x_{2i},\  1/ \tau) \\[10pt]
&amp;= -\frac{1}{2} \log \left(2 \pi \cdot \frac{1}{\tau_0} \right) - \frac{\tau_0 (\beta_0 - \mu_0)^2}{2} + \sum_{i=1}^{N} - \left( \frac{1}{2} \log \left(2 \pi \cdot \frac{1}{\tau} \right) + \frac{\tau(y_i - \beta_0 - \beta_1 x_{1i} - \beta_2 x_{2i})^2}{2} \right)\\
&amp;\propto  - \frac{\tau_0 (\beta_0 - \mu_0)^2}{2} - \frac{\tau}{2} \sum_{i=1}^N (y_i - \beta_0 - \beta_1 x_{1i} - \beta_2 x_{2i})^2  \ \ \ \cdots\cdots (1)
\end{align}\)
</span></p>

<p>Note that 
\(p(y|\beta_0, \beta_1, \beta_2, \tau, x)\) and \(p(\beta_0 | \mu_0, \tau_0)\) are Normal distribution, so we can rewrite them. Also, log Normal PDF is important in deriving.</p>

<p><span style="font-size:1.0em; line-height:0%">
\(\begin{align}
-\frac{1}{2} \log (2 \pi \sigma^2) - \frac{(x - \mu)^2}{2 \sigma^2} = -\frac{1}{2} \log \left( \frac{2 \pi}{\tau} \right) - \frac{\tau(x - \mu)^2}{2}
\end{align}\)
</span></p>

<p>Another important and useful property of Normal distribution is that, when we focus on \(x\),</p>

<p><span style="font-size:1.0em; line-height:0%">
\(\newcommand{\Normal}{\mathcal{N}}
\begin{align}
&amp;{\rm if}\ \  x \sim \Normal(u,\ 1/t),\\
&amp;-\frac{t}{2} (x - u)^2 \propto - \frac{t}{2} x^2 + tux  \ \ \ \cdots\cdots (2)
\end{align}\)
</span></p>

<p>Also, remember \((x + y + z + w)^2 = (y + (x + z + w))^2\). Now, let’s resume (1).</p>

<p><span style="font-size:1.0em; line-height:0%">
\(\newcommand{\Normal}{\mathcal{N}}
\begin{align}
(1) &amp;\propto - \frac{\tau_0}{2} \beta_0^2 + \tau_0 \mu_0 \beta_0 - \frac{\tau}{2} \sum_{i=1}^N \left(\beta_0^2 - 2 \beta_0 (y_i - \beta_1 x_{1i} - \beta_2 x_{2i})  \right)  \ \ \ \cdots\cdots (3) \\
&amp;= - \frac{\tau_0}{2} \beta_0^2 + \tau_0 \mu_0 \beta_0 - \frac{\tau}{2} N \beta_0^2 + \tau \sum_{i=i}^N \beta_0 (y_i - \beta_1 x_{1i} - \beta_2 x_{2i}) \\
&amp;= \left( - \frac{\tau_0 + \tau N}{2} \right) \beta_0^2 + \left( \tau_0 + \tau N   \right) \left(  \frac{\tau_0}{\tau_0 + \tau N}  \right) \mu_0 \beta_0 + \left( \tau_0 + \tau N  \right) \left( \frac{\tau}{\tau_0 + \tau N} \right) \beta_0 \sum_{i=1}^N (y_i - \beta_1 x_{1i} - \beta_2 x_{2i})\\
&amp;= \left( - \frac{\tau_0 + \tau N}{2} \right) \beta_0^2 + (\tau_0 + \tau N)  \cdot \left( \frac{\tau_0 \mu_0 + \tau \sum_N (y_i - \beta_1 x_{1i} - \beta_2 x_{2i})}{\tau_0 + \tau N} \right) \cdot \beta_0
\end{align}\)
</span></p>

<p>By comparing the last equation with (2), we can say</p>

<p><span style="font-size:1.0em; line-height:0%">
\(\newcommand{\Normal}{\mathcal{N}}
\begin{align}
p(\beta_0 | \beta_1,\beta_2, \tau, y, x, \mu_0,\mu_1,\mu_2 \tau_0,\tau_1,\tau_2,\alpha,\beta) \sim \Normal \left( \frac{\tau_0 \mu_0 + \tau \sum_N (y_i - \beta_1 x_{1i} - \beta_2 x_{2i})}{\tau_0 + \tau N} ,\  1/(\tau_0 + \tau N) \right)
\end{align}\)
</span></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># beta_0</span><span class="w">
</span><span class="n">sample_beta_0</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="w"> </span><span class="n">x1</span><span class="p">,</span><span class="w"> </span><span class="n">x2</span><span class="p">,</span><span class="w"> </span><span class="n">beta_1</span><span class="p">,</span><span class="w"> </span><span class="n">beta_2</span><span class="p">,</span><span class="w"> </span><span class="n">tau</span><span class="p">,</span><span class="w"> </span><span class="n">mu_0</span><span class="p">,</span><span class="w"> </span><span class="n">tau_0</span><span class="p">){</span><span class="w">
  </span><span class="n">precision</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">tau_0</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">tau</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">N</span><span class="w">
  </span><span class="n">mu</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">tau_0</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">mu_0</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">tau</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="p">(</span><span class="n">beta_1</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">x1</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="p">(</span><span class="n">beta_2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">x2</span><span class="p">))</span><span class="w">
  </span><span class="n">mu</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mu</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">precision</span><span class="w">
  </span><span class="n">value</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rnorm</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">mean</span><span class="o">=</span><span class="n">mu</span><span class="p">,</span><span class="w"> </span><span class="n">sd</span><span class="o">=</span><span class="m">1</span><span class="o">/</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">precision</span><span class="p">))</span><span class="w">
  </span><span class="nf">return</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>Update for \(\beta_1\) (coefficient)</strong></p>

<p>Derivation is quite similar until (1). We have slightly different form for (3) because we now focus on \(\beta_1\).</p>

<p><span style="font-size:1.0em; line-height:0%">
\(\newcommand{\Normal}{\mathcal{N}}
\begin{align}
&amp;p(\beta_1 | \beta_0,\beta_2, \tau, y, x, \mu_0,\mu_1,\mu_2 \tau_0,\tau_1,\tau_2,\alpha,\beta)\\
&amp;\propto - \frac{\tau_1}{2} \beta_1^2 + \tau_1 \mu_1 \beta_1 - \frac{\tau}{2} \sum_{i=1}^N \left( \beta_1^2 x_{1i}^2 - 2 \beta_1 x_{1i}^2 (y_i - \beta_0 - \beta_2 x_{2i})  \right) \\
&amp;= \left( - \frac{\tau_1 + \tau \sum_N x_{i1}^2}{2}    \right) \beta_1^2 + \tau_1 \mu_1 \beta_1 + \tau \sum_{i=1}^2 \left( \beta_1 x_{i1} (y_i - \beta_0 - \beta_2 x_{2i}) \right) \\
&amp;= \left( - \frac{\tau_1 + \tau \sum_N x_{i1}^2}{2}    \right) \beta_1^2 + \left[ \tau_1 \mu_1 + \tau \sum_{i=1}^N x_{1i} (y_i - \beta_0 - \beta_2 x_{2i})  \right] \beta_1\\
&amp;= \left( - \frac{\tau_1 + \tau \sum_N x_{i1}^2}{2}    \right) \beta_1^2 + (\tau_1 + \tau \sum_N x_{i1}^2) \frac{ \tau_1 \mu_1 + \tau \sum_{i=1}^N x_{1i} (y_i - \beta_0 - \beta_2 x_{2i})  }{\tau_1 + \tau \sum_N x_{i1}^2} \beta_1
\end{align}\)
</span></p>

<p>Now, we get</p>

<p><span style="font-size:1.0em; line-height:0%">
\(\newcommand{\Normal}{\mathcal{N}}
\begin{align}
p(\beta_1 | \beta_0,\beta_2, \tau, y, x, \mu_0,\mu_1,\mu_2 \tau_0,\tau_1,\tau_2,\alpha,\beta) \sim \Normal \left( \frac{\tau_1 \mu_1 + \tau \sum_N x_{1i} (y_i - \beta_0 - \beta_2 x_{2i})}{\tau_1 + \tau \sum_N x_{1i}^2} ,\  1/(\tau_1 + \tau \sum_N x_{1i}^2) \right)
\end{align}\)
</span></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># beta_1</span><span class="w">
</span><span class="n">sample_beta_1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="w"> </span><span class="n">x1</span><span class="p">,</span><span class="w"> </span><span class="n">x2</span><span class="p">,</span><span class="w"> </span><span class="n">beta_0</span><span class="p">,</span><span class="w"> </span><span class="n">beta_2</span><span class="p">,</span><span class="w"> </span><span class="n">tau</span><span class="p">,</span><span class="w"> </span><span class="n">mu_1</span><span class="p">,</span><span class="w"> </span><span class="n">tau_1</span><span class="p">){</span><span class="w">
  </span><span class="n">precision</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">tau_1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">tau</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">x1</span><span class="o">*</span><span class="n">x1</span><span class="p">)</span><span class="w">
  </span><span class="n">mu</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">tau_1</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">mu_1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">tau</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">x1</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">beta_0</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">beta_2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">x2</span><span class="p">))</span><span class="w">
  </span><span class="n">mu</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mu</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">precision</span><span class="w">
  </span><span class="n">value</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rnorm</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">mean</span><span class="o">=</span><span class="n">mu</span><span class="p">,</span><span class="w"> </span><span class="n">sd</span><span class="o">=</span><span class="m">1</span><span class="o">/</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">precision</span><span class="p">))</span><span class="w">
  </span><span class="nf">return</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>We can get the similar equation for \(\beta_2\).</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># beta_2</span><span class="w">
</span><span class="n">sample_beta_2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="w"> </span><span class="n">x1</span><span class="p">,</span><span class="w"> </span><span class="n">x2</span><span class="p">,</span><span class="w"> </span><span class="n">beta_0</span><span class="p">,</span><span class="w"> </span><span class="n">beta_1</span><span class="p">,</span><span class="w"> </span><span class="n">tau</span><span class="p">,</span><span class="w"> </span><span class="n">mu_2</span><span class="p">,</span><span class="w"> </span><span class="n">tau_2</span><span class="p">){</span><span class="w">
  </span><span class="n">precision</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">tau_2</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">tau</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">x2</span><span class="o">*</span><span class="n">x2</span><span class="p">)</span><span class="w">
  </span><span class="n">mu</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">tau_2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">mu_2</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">tau</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">x2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">beta_0</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">beta_1</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">x1</span><span class="p">))</span><span class="w">
  </span><span class="n">mu</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mu</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">precision</span><span class="w">
  </span><span class="n">value</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rnorm</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">mean</span><span class="o">=</span><span class="n">mu</span><span class="p">,</span><span class="w"> </span><span class="n">sd</span><span class="o">=</span><span class="m">1</span><span class="o">/</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">precision</span><span class="p">))</span><span class="w">
  </span><span class="nf">return</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>Update for \(\tau\) (precision)</strong></p>

<p>Let’s recall log PDF of <a href="https://en.wikipedia.org/wiki/Gamma_distribution">Gamma distribution</a>:</p>

<p><span style="font-size:1.0em; line-height:0%">
\(\begin{align}
\log \frac{\beta^\alpha}{\Gamma (\alpha)} + (\alpha-1) \log x - \beta x \propto (\alpha - 1) \log x - \beta x
\end{align}\)
</span></p>

<p>We can get updat equation:</p>

<p><span style="font-size:1.0em; line-height:0%">
\(\newcommand{\Normal}{\mathcal{N}}
\begin{align}
&amp;p( \tau | \beta_0, \beta_1, \beta_2,  y, x, \mu_0,\mu_1,\mu_2 \tau_0,\tau_1,\tau_2,\alpha,\beta) \\
&amp;\propto p(y | \beta_0, \beta_1, \beta_2, \tau, x) p(\tau | \alpha, \beta)\\
&amp;= \sum_{i=1}^N - \left( \frac{1}{2} \log \left(2 \pi \cdot \frac{1}{\tau} \right) + \frac{\tau}{2} (y_i - \beta_0 - \beta_{1} x_{1i} - \beta_2 x_{2i})^2 \right)  + (\alpha - 1) \log \tau - \beta \tau\\
&amp;= \sum_{i=1}^N - \left( \frac{1}{2} \left(\log 2 + \log \pi + \log \frac{1}{\tau} \right) + \frac{\tau}{2} (y_i - \beta_0 - \beta_{1} x_{1i} - \beta_2 x_{2i})^2 \right)  + (\alpha - 1) \log \tau - \beta \tau\\
&amp;\propto \sum_{i=1}^N - \left( \frac{1}{2} \left(\log \frac{1}{\tau} \right) + \frac{\tau}{2} (y_i - \beta_0 - \beta_{1} x_{1i} - \beta_2 x_{2i})^2 \right)  + (\alpha - 1) \log \tau - \beta \tau\\
&amp;= - \frac{N}{2} \log \frac{1}{\tau} - \frac{\tau}{2}  \sum_{i=1}^N (y_i - \beta_0 - \beta_{1} x_{1i} - \beta_2 x_{2i})^2 + (\alpha - 1) \log \tau - \beta \tau\\
&amp;= \frac{N}{2} \log \tau - \frac{\tau}{2}  \sum_{i=1}^N (y_i - \beta_0 - \beta_{1} x_{1i} - \beta_2 x_{2i})^2 + (\alpha - 1) \log \tau - \beta \tau\\
&amp;= \left( \alpha + \frac{N}{2} - 1 \right) \log \tau - \left( \beta + \sum_{i=1}^N \frac{(y_i - \beta_0 - \beta_{1} x_{1i} - \beta_2 x_{2i})^2}{2}  \right) \tau
\end{align}\)
</span></p>

<p>So, we get
<span style="font-size:1.0em; line-height:0%">
\(\newcommand{\Normal}{\mathcal{N}}
\begin{align}
&amp;p( \tau | \beta_0, \beta_1, \beta_2,  y, x, \mu_0,\mu_1,\mu_2 \tau_0,\tau_1,\tau_2,\alpha,\beta) \sim {\rm Gamma} \left(\alpha + \frac{N}{2} , \  \beta + \sum_{i=1}^N \frac{(y_i - \beta_0 - \beta_{1} x_{1i} - \beta_2 x_{2i})^2}{2} \right)
\end{align}\)
</span></p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># tau</span><span class="w">
</span><span class="n">sample_tau</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="w"> </span><span class="n">x1</span><span class="p">,</span><span class="w"> </span><span class="n">x2</span><span class="p">,</span><span class="w"> </span><span class="n">beta_0</span><span class="p">,</span><span class="w"> </span><span class="n">beta_1</span><span class="p">,</span><span class="w"> </span><span class="n">beta_2</span><span class="p">,</span><span class="w"> </span><span class="n">alpha</span><span class="p">,</span><span class="w"> </span><span class="n">beta</span><span class="p">){</span><span class="w">
  </span><span class="n">alpha_new</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">alpha</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">N</span><span class="o">/</span><span class="m">2</span><span class="w">
  </span><span class="n">resid</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">beta_0</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="p">(</span><span class="n">beta_1</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">x1</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="p">(</span><span class="n">beta_2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">x2</span><span class="p">)</span><span class="w">
  </span><span class="n">beta_new</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">beta</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">resid</span><span class="o">*</span><span class="n">resid</span><span class="p">)</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="m">2</span><span class="w">
  </span><span class="n">value</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rgamma</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">shape</span><span class="o">=</span><span class="n">alpha_new</span><span class="p">,</span><span class="w"> </span><span class="n">rate</span><span class="o">=</span><span class="n">beta_new</span><span class="p">)</span><span class="w">
    </span><span class="c1"># alpha = shape, beta = 1/rate in rgamma()</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="sampling">Sampling</h2>
<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iter_num</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">15000</span><span class="w">

</span><span class="c1"># Prepare storages</span><span class="w">
</span><span class="n">beta_0</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="n">iter_num</span><span class="p">)</span><span class="w">
</span><span class="n">beta_1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="n">iter_num</span><span class="p">)</span><span class="w">
</span><span class="n">beta_2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="n">iter_num</span><span class="p">)</span><span class="w">
</span><span class="n">tau</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="n">iter_num</span><span class="p">)</span><span class="w">

</span><span class="c1"># Initialization</span><span class="w">
</span><span class="n">beta_0</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">0</span><span class="w">
</span><span class="n">beta_1</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="n">beta_2</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">2</span><span class="w">
</span><span class="n">tau</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">2</span><span class="w">
</span><span class="c1"># Run</span><span class="w">
</span><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="p">(</span><span class="n">iter_num</span><span class="m">-1</span><span class="p">)){</span><span class="w">
  </span><span class="n">beta_0</span><span class="p">[</span><span class="n">i</span><span class="m">+1</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sample_beta_0</span><span class="p">(</span><span class="n">data</span><span class="o">$</span><span class="n">Y</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="o">$</span><span class="n">age</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="o">$</span><span class="n">income</span><span class="p">,</span><span class="w"> </span><span class="n">beta_1</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="w"> </span><span class="n">beta_2</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="w"> </span><span class="n">tau</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">0.01</span><span class="p">)</span><span class="w">
  </span><span class="n">beta_1</span><span class="p">[</span><span class="n">i</span><span class="m">+1</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sample_beta_1</span><span class="p">(</span><span class="n">data</span><span class="o">$</span><span class="n">Y</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="o">$</span><span class="n">age</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="o">$</span><span class="n">income</span><span class="p">,</span><span class="w"> </span><span class="n">beta_0</span><span class="p">[</span><span class="n">i</span><span class="m">+1</span><span class="p">],</span><span class="w"> </span><span class="n">beta_2</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="w"> </span><span class="n">tau</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">0.01</span><span class="p">)</span><span class="w">
  </span><span class="n">beta_2</span><span class="p">[</span><span class="n">i</span><span class="m">+1</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sample_beta_2</span><span class="p">(</span><span class="n">data</span><span class="o">$</span><span class="n">Y</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="o">$</span><span class="n">age</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="o">$</span><span class="n">income</span><span class="p">,</span><span class="w"> </span><span class="n">beta_0</span><span class="p">[</span><span class="n">i</span><span class="m">+1</span><span class="p">],</span><span class="w"> </span><span class="n">beta_1</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="w"> </span><span class="n">tau</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">0.01</span><span class="p">)</span><span class="w">
  </span><span class="n">tau</span><span class="p">[</span><span class="n">i</span><span class="m">+1</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sample_tau</span><span class="p">(</span><span class="n">data</span><span class="o">$</span><span class="n">Y</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="o">$</span><span class="n">age</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="o">$</span><span class="n">income</span><span class="p">,</span><span class="w"> </span><span class="n">beta_0</span><span class="p">[</span><span class="n">i</span><span class="m">+1</span><span class="p">],</span><span class="w"> </span><span class="n">beta_1</span><span class="p">[</span><span class="n">i</span><span class="m">+1</span><span class="p">],</span><span class="w"> </span><span class="n">beta_2</span><span class="p">[</span><span class="n">i</span><span class="m">+1</span><span class="p">],</span><span class="w"> </span><span class="n">alpha</span><span class="o">=</span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">beta</span><span class="o">=</span><span class="m">1</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="result">Result</h2>

<p><img src="/assets/images/posts/170827mr_hist.png" width="750" /></p>

<p><img src="/assets/images/posts/170827mr_trace.png" width="750" /></p>

<h2 id="code">Code</h2>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Set working directory</span><span class="w">
</span><span class="n">setwd</span><span class="p">(</span><span class="s2">"/Users/Study/Analysis/"</span><span class="p">)</span><span class="w">

</span><span class="c1"># Load library</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">tidyverse</span><span class="p">)</span><span class="w">
</span><span class="c1">###############################################</span><span class="w">
</span><span class="c1"># Bayesian Linear Regression (Gibbs Sampling) #</span><span class="w">
</span><span class="c1">###############################################</span><span class="w">
</span><span class="n">iter_num</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">15000</span><span class="w">
</span><span class="n">burn_in_num</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">12000</span><span class="w">

</span><span class="c1">####################</span><span class="w">
</span><span class="c1"># Create fake data #</span><span class="w">
</span><span class="c1">####################</span><span class="w">
</span><span class="n">num_data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1000</span><span class="w">
</span><span class="n">N</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">num_data</span><span class="w">

</span><span class="n">age</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rnorm</span><span class="p">(</span><span class="n">num_data</span><span class="p">,</span><span class="w"> </span><span class="n">mean</span><span class="o">=</span><span class="m">50</span><span class="p">,</span><span class="w"> </span><span class="n">sd</span><span class="o">=</span><span class="m">15</span><span class="p">)</span><span class="w">
</span><span class="n">income</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rnorm</span><span class="p">(</span><span class="n">num_data</span><span class="p">,</span><span class="w"> </span><span class="n">mean</span><span class="o">=</span><span class="m">500</span><span class="p">,</span><span class="w"> </span><span class="n">sd</span><span class="o">=</span><span class="m">100</span><span class="p">)</span><span class="w">
</span><span class="n">data</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">age</span><span class="p">,</span><span class="w"> </span><span class="n">income</span><span class="p">)</span><span class="w">
</span><span class="n">covariates</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.matrix</span><span class="p">(</span><span class="n">data</span><span class="p">[,</span><span class="nf">c</span><span class="p">(</span><span class="s2">"age"</span><span class="p">,</span><span class="w"> </span><span class="s2">"income"</span><span class="p">)])</span><span class="w">


</span><span class="c1">## Multiple Regression</span><span class="w">
</span><span class="n">true_beta0</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1.5</span><span class="w">
</span><span class="n">true_beta1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">2.8</span><span class="w">
</span><span class="n">true_beta2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">-1.2</span><span class="w">
</span><span class="n">tau_true</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="n">betaX</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">true_beta1</span><span class="p">,</span><span class="w"> </span><span class="n">true_beta2</span><span class="p">)</span><span class="w">
</span><span class="n">data</span><span class="o">$</span><span class="n">Y</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">true_beta0</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">covariates</span><span class="w"> </span><span class="o">%*%</span><span class="w"> </span><span class="n">betaX</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">rnorm</span><span class="p">(</span><span class="n">num_data</span><span class="p">,</span><span class="w"> </span><span class="n">sd</span><span class="o">=</span><span class="m">1</span><span class="o">/</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">tau_true</span><span class="p">))</span><span class="w">


</span><span class="c1">## Check with package</span><span class="w">
</span><span class="n">res_lm</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">lm</span><span class="p">(</span><span class="n">Y</span><span class="w"> </span><span class="o">~</span><span class="w"> </span><span class="n">age</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">income</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="p">)</span><span class="w">
</span><span class="n">summary</span><span class="p">(</span><span class="n">res_lm</span><span class="p">)</span><span class="w">

</span><span class="c1">#############</span><span class="w">
</span><span class="c1"># Inference #</span><span class="w">
</span><span class="c1">#############</span><span class="w">
</span><span class="n">sample_beta_0</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="w"> </span><span class="n">x1</span><span class="p">,</span><span class="w"> </span><span class="n">x2</span><span class="p">,</span><span class="w"> </span><span class="n">beta_1</span><span class="p">,</span><span class="w"> </span><span class="n">beta_2</span><span class="p">,</span><span class="w"> </span><span class="n">tau</span><span class="p">,</span><span class="w"> </span><span class="n">mu_0</span><span class="p">,</span><span class="w"> </span><span class="n">tau_0</span><span class="p">){</span><span class="w">
  </span><span class="n">precision</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">tau_0</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">tau</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">N</span><span class="w">
  </span><span class="n">mu</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">tau_0</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">mu_0</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">tau</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="p">(</span><span class="n">beta_1</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">x1</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="p">(</span><span class="n">beta_2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">x2</span><span class="p">))</span><span class="w">
  </span><span class="n">mu</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mu</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">precision</span><span class="w">
  </span><span class="n">value</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rnorm</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">mean</span><span class="o">=</span><span class="n">mu</span><span class="p">,</span><span class="w"> </span><span class="n">sd</span><span class="o">=</span><span class="m">1</span><span class="o">/</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">precision</span><span class="p">))</span><span class="w">
  </span><span class="nf">return</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">


</span><span class="n">sample_beta_1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="w"> </span><span class="n">x1</span><span class="p">,</span><span class="w"> </span><span class="n">x2</span><span class="p">,</span><span class="w"> </span><span class="n">beta_0</span><span class="p">,</span><span class="w"> </span><span class="n">beta_2</span><span class="p">,</span><span class="w"> </span><span class="n">tau</span><span class="p">,</span><span class="w"> </span><span class="n">mu_1</span><span class="p">,</span><span class="w"> </span><span class="n">tau_1</span><span class="p">){</span><span class="w">
  </span><span class="n">precision</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">tau_1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">tau</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">x1</span><span class="o">*</span><span class="n">x1</span><span class="p">)</span><span class="w">
  </span><span class="n">mu</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">tau_1</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">mu_1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">tau</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">x1</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">beta_0</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">beta_2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">x2</span><span class="p">))</span><span class="w">
  </span><span class="n">mu</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mu</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">precision</span><span class="w">
  </span><span class="n">value</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rnorm</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">mean</span><span class="o">=</span><span class="n">mu</span><span class="p">,</span><span class="w"> </span><span class="n">sd</span><span class="o">=</span><span class="m">1</span><span class="o">/</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">precision</span><span class="p">))</span><span class="w">
  </span><span class="nf">return</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="n">sample_beta_2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="w"> </span><span class="n">x1</span><span class="p">,</span><span class="w"> </span><span class="n">x2</span><span class="p">,</span><span class="w"> </span><span class="n">beta_0</span><span class="p">,</span><span class="w"> </span><span class="n">beta_1</span><span class="p">,</span><span class="w"> </span><span class="n">tau</span><span class="p">,</span><span class="w"> </span><span class="n">mu_2</span><span class="p">,</span><span class="w"> </span><span class="n">tau_2</span><span class="p">){</span><span class="w">
  </span><span class="n">precision</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">tau_2</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">tau</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">x2</span><span class="o">*</span><span class="n">x2</span><span class="p">)</span><span class="w">
  </span><span class="n">mu</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">tau_2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">mu_2</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">tau</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">x2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="n">y</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">beta_0</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">beta_1</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">x1</span><span class="p">))</span><span class="w">
  </span><span class="n">mu</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">mu</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="n">precision</span><span class="w">
  </span><span class="n">value</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rnorm</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">mean</span><span class="o">=</span><span class="n">mu</span><span class="p">,</span><span class="w"> </span><span class="n">sd</span><span class="o">=</span><span class="m">1</span><span class="o">/</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">precision</span><span class="p">))</span><span class="w">
  </span><span class="nf">return</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="n">sample_tau</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="w"> </span><span class="n">x1</span><span class="p">,</span><span class="w"> </span><span class="n">x2</span><span class="p">,</span><span class="w"> </span><span class="n">beta_0</span><span class="p">,</span><span class="w"> </span><span class="n">beta_1</span><span class="p">,</span><span class="w"> </span><span class="n">beta_2</span><span class="p">,</span><span class="w"> </span><span class="n">alpha</span><span class="p">,</span><span class="w"> </span><span class="n">beta</span><span class="p">){</span><span class="w">
  </span><span class="n">alpha_new</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">alpha</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">N</span><span class="o">/</span><span class="m">2</span><span class="w">
  </span><span class="n">resid</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="n">beta_0</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="p">(</span><span class="n">beta_1</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">x1</span><span class="p">)</span><span class="w"> </span><span class="o">-</span><span class="w"> </span><span class="p">(</span><span class="n">beta_2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">x2</span><span class="p">)</span><span class="w">
  </span><span class="n">beta_new</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">beta</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nf">sum</span><span class="p">(</span><span class="n">resid</span><span class="o">*</span><span class="n">resid</span><span class="p">)</span><span class="w"> </span><span class="o">/</span><span class="w"> </span><span class="m">2</span><span class="w">
  </span><span class="n">value</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">rgamma</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">shape</span><span class="o">=</span><span class="n">alpha_new</span><span class="p">,</span><span class="w"> </span><span class="n">rate</span><span class="o">=</span><span class="n">beta_new</span><span class="p">)</span><span class="w">
    </span><span class="c1"># alpha = shape, beta = 1/rate</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="c1"># Prepare storages</span><span class="w">
</span><span class="n">beta_0</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="n">iter_num</span><span class="p">)</span><span class="w">
</span><span class="n">beta_1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="n">iter_num</span><span class="p">)</span><span class="w">
</span><span class="n">beta_2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="n">iter_num</span><span class="p">)</span><span class="w">
</span><span class="n">tau</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">rep</span><span class="p">(</span><span class="kc">NA</span><span class="p">,</span><span class="w"> </span><span class="n">iter_num</span><span class="p">)</span><span class="w">

</span><span class="c1"># Initialization</span><span class="w">
</span><span class="n">beta_0</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">0</span><span class="w">
</span><span class="n">beta_1</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="w">
</span><span class="n">beta_2</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">2</span><span class="w">
</span><span class="n">tau</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">2</span><span class="w">
</span><span class="c1"># Run</span><span class="w">
</span><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="p">(</span><span class="n">iter_num</span><span class="m">-1</span><span class="p">)){</span><span class="w">
  </span><span class="n">beta_0</span><span class="p">[</span><span class="n">i</span><span class="m">+1</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sample_beta_0</span><span class="p">(</span><span class="n">data</span><span class="o">$</span><span class="n">Y</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="o">$</span><span class="n">age</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="o">$</span><span class="n">income</span><span class="p">,</span><span class="w"> </span><span class="n">beta_1</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="w"> </span><span class="n">beta_2</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="w"> </span><span class="n">tau</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">0.01</span><span class="p">)</span><span class="w">
  </span><span class="n">beta_1</span><span class="p">[</span><span class="n">i</span><span class="m">+1</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sample_beta_1</span><span class="p">(</span><span class="n">data</span><span class="o">$</span><span class="n">Y</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="o">$</span><span class="n">age</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="o">$</span><span class="n">income</span><span class="p">,</span><span class="w"> </span><span class="n">beta_0</span><span class="p">[</span><span class="n">i</span><span class="m">+1</span><span class="p">],</span><span class="w"> </span><span class="n">beta_2</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="w"> </span><span class="n">tau</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">0.01</span><span class="p">)</span><span class="w">
  </span><span class="n">beta_2</span><span class="p">[</span><span class="n">i</span><span class="m">+1</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sample_beta_2</span><span class="p">(</span><span class="n">data</span><span class="o">$</span><span class="n">Y</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="o">$</span><span class="n">age</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="o">$</span><span class="n">income</span><span class="p">,</span><span class="w"> </span><span class="n">beta_0</span><span class="p">[</span><span class="n">i</span><span class="m">+1</span><span class="p">],</span><span class="w"> </span><span class="n">beta_1</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="w"> </span><span class="n">tau</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="w"> </span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="m">0.01</span><span class="p">)</span><span class="w">
  </span><span class="n">tau</span><span class="p">[</span><span class="n">i</span><span class="m">+1</span><span class="p">]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">sample_tau</span><span class="p">(</span><span class="n">data</span><span class="o">$</span><span class="n">Y</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="o">$</span><span class="n">age</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="o">$</span><span class="n">income</span><span class="p">,</span><span class="w"> </span><span class="n">beta_0</span><span class="p">[</span><span class="n">i</span><span class="m">+1</span><span class="p">],</span><span class="w"> </span><span class="n">beta_1</span><span class="p">[</span><span class="n">i</span><span class="m">+1</span><span class="p">],</span><span class="w"> </span><span class="n">beta_2</span><span class="p">[</span><span class="n">i</span><span class="m">+1</span><span class="p">],</span><span class="w"> </span><span class="n">alpha</span><span class="o">=</span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">beta</span><span class="o">=</span><span class="m">1</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">


</span><span class="c1"># Make Figure</span><span class="w">
</span><span class="n">make_figure</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">params</span><span class="p">,</span><span class="w"> </span><span class="n">true_values</span><span class="p">,</span><span class="w"> </span><span class="n">params_names</span><span class="p">,</span><span class="w"> </span><span class="n">burn_in</span><span class="o">=</span><span class="m">2000</span><span class="p">,</span><span class="w"> </span><span class="n">slice</span><span class="o">=</span><span class="m">5</span><span class="p">){</span><span class="w">
  </span><span class="n">num_params</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">length</span><span class="p">(</span><span class="n">params</span><span class="p">)</span><span class="w">

  </span><span class="n">tidy_params</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">list</span><span class="p">()</span><span class="w">
  </span><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="n">num_params</span><span class="p">){</span><span class="w">
    </span><span class="n">temp</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="n">value</span><span class="o">=</span><span class="n">params</span><span class="p">[[</span><span class="n">i</span><span class="p">]])</span><span class="w">
    </span><span class="n">temp</span><span class="o">$</span><span class="n">parameter</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">params_names</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="w">
    </span><span class="n">temp</span><span class="o">$</span><span class="n">iter</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="n">nrow</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span><span class="w">

    </span><span class="n">temp</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">temp</span><span class="p">[</span><span class="n">burn_in</span><span class="o">:</span><span class="n">nrow</span><span class="p">(</span><span class="n">temp</span><span class="p">)</span><span class="w"> </span><span class="p">,]</span><span class="w">
    </span><span class="n">slice_index</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">seq</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="w"> </span><span class="n">nrow</span><span class="p">(</span><span class="n">temp</span><span class="p">),</span><span class="w"> </span><span class="n">slice</span><span class="p">)</span><span class="c1"># slice data</span><span class="w">
    </span><span class="n">temp</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">temp</span><span class="p">[</span><span class="n">slice_index</span><span class="p">,</span><span class="w"> </span><span class="p">]</span><span class="w">
    </span><span class="n">tidy_params</span><span class="p">[[</span><span class="n">i</span><span class="p">]]</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">temp</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="n">tidy_params</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">do.call</span><span class="p">(</span><span class="n">rbind.data.frame</span><span class="p">,</span><span class="w"> </span><span class="n">tidy_params</span><span class="p">)</span><span class="w">

  </span><span class="n">true</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">data.frame</span><span class="p">(</span><span class="w">
    </span><span class="n">parameter</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">params_names</span><span class="p">,</span><span class="w">
    </span><span class="n">value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">true_values</span><span class="w">
    </span><span class="p">)</span><span class="w">

  </span><span class="n">param</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">tidy_params</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">iter</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="o">=</span><span class="n">value</span><span class="p">,</span><span class="w"> </span><span class="n">group</span><span class="o">=</span><span class="n">parameter</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="o">=</span><span class="n">parameter</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w"> 
      </span><span class="n">geom_line</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w"> 
      </span><span class="n">geom_point</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="m">0.3</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
      </span><span class="n">facet_wrap</span><span class="p">(</span><span class="o">~</span><span class="n">parameter</span><span class="p">,</span><span class="w"> </span><span class="n">ncol</span><span class="o">=</span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">scales</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"free"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
      </span><span class="n">geom_hline</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">true</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">yintercept</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">value</span><span class="p">),</span><span class="w"> </span><span class="n">size</span><span class="o">=</span><span class="m">0.7</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
      </span><span class="n">theme_bw</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w">
      </span><span class="n">theme</span><span class="p">(</span><span class="n">legend.position</span><span class="o">=</span><span class="s2">"none"</span><span class="p">)</span><span class="w">

  </span><span class="n">param_density</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">ggplot</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">tidy_params</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">value</span><span class="p">,</span><span class="w"> </span><span class="n">color</span><span class="o">=</span><span class="n">parameter</span><span class="p">,</span><span class="w"> </span><span class="n">fill</span><span class="o">=</span><span class="n">parameter</span><span class="p">))</span><span class="w"> </span><span class="o">+</span><span class="w">
    </span><span class="n">geom_density</span><span class="p">(</span><span class="n">stat</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"density"</span><span class="p">,</span><span class="w"> </span><span class="n">position</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"identity"</span><span class="p">,</span><span class="n">alpha</span><span class="o">=</span><span class="m">0.6</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"> 
    </span><span class="n">facet_wrap</span><span class="p">(</span><span class="o">~</span><span class="n">parameter</span><span class="p">,</span><span class="w"> </span><span class="n">ncol</span><span class="o">=</span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">scales</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"free"</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
    </span><span class="n">geom_vline</span><span class="p">(</span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">true</span><span class="p">,</span><span class="w"> </span><span class="n">aes</span><span class="p">(</span><span class="n">xintercept</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">value</span><span class="p">),</span><span class="w"> </span><span class="n">size</span><span class="o">=</span><span class="m">0.7</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">
    </span><span class="n">theme_bw</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w">
    </span><span class="n">theme</span><span class="p">(</span><span class="n">legend.position</span><span class="o">=</span><span class="s2">"none"</span><span class="p">)</span><span class="w">

  </span><span class="nf">return</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="n">param</span><span class="p">,</span><span class="w"> </span><span class="n">param_density</span><span class="p">))</span><span class="w">

</span><span class="p">}</span><span class="w">

</span><span class="n">params</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">list</span><span class="p">(</span><span class="n">beta_0</span><span class="p">,</span><span class="w"> </span><span class="n">beta_1</span><span class="p">,</span><span class="w"> </span><span class="n">beta_2</span><span class="p">,</span><span class="w"> </span><span class="n">tau</span><span class="p">)</span><span class="w">
</span><span class="n">true_values</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">true_beta0</span><span class="p">,</span><span class="w"> </span><span class="n">true_beta1</span><span class="p">,</span><span class="w"> </span><span class="n">true_beta2</span><span class="p">,</span><span class="w"> </span><span class="n">tau_true</span><span class="p">)</span><span class="w">
</span><span class="n">params_names</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"beta_0"</span><span class="p">,</span><span class="w"> </span><span class="s2">"beta_1"</span><span class="p">,</span><span class="w"> </span><span class="s2">"beta_2"</span><span class="p">,</span><span class="w"> </span><span class="s2">"tau"</span><span class="p">)</span><span class="w">
</span><span class="n">gs_res3</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">make_figure</span><span class="p">(</span><span class="n">params</span><span class="p">,</span><span class="w"> </span><span class="n">true_values</span><span class="p">,</span><span class="w"> </span><span class="n">params_names</span><span class="p">,</span><span class="w"> </span><span class="n">burn_in</span><span class="o">=</span><span class="n">burn_in_num</span><span class="p">,</span><span class="w"> </span><span class="n">slice</span><span class="o">=</span><span class="m">5</span><span class="p">)</span><span class="w">
</span><span class="n">gs_res3</span><span class="p">[[</span><span class="m">1</span><span class="p">]]</span><span class="w">
</span><span class="n">gs_res3</span><span class="p">[[</span><span class="m">2</span><span class="p">]]</span><span class="w">
</span><span class="n">saveRDS</span><span class="p">(</span><span class="n">gs_res3</span><span class="p">,</span><span class="s2">"figure.obj"</span><span class="p">)</span><span class="w">
</span><span class="n">saveRDS</span><span class="p">(</span><span class="n">data</span><span class="p">,</span><span class="s2">"data.obj"</span><span class="p">)</span><span class="w">
</span><span class="n">ggsave</span><span class="p">(</span><span class="s2">"trace.png"</span><span class="p">,</span><span class="w"> </span><span class="n">gs_res3</span><span class="p">[[</span><span class="m">1</span><span class="p">]],</span><span class="w"> </span><span class="n">width</span><span class="o">=</span><span class="m">7</span><span class="p">,</span><span class="w"> </span><span class="n">height</span><span class="o">=</span><span class="m">5</span><span class="p">)</span><span class="w">
</span><span class="n">ggsave</span><span class="p">(</span><span class="s2">"hist.png"</span><span class="p">,</span><span class="w"> </span><span class="n">gs_res3</span><span class="p">[[</span><span class="m">2</span><span class="p">]],</span><span class="w"> </span><span class="n">width</span><span class="o">=</span><span class="m">7</span><span class="p">,</span><span class="w"> </span><span class="n">height</span><span class="o">=</span><span class="m">6</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>]]></content><author><name>Shusei Eshima</name></author><category term="Bayesian Analysis" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Perplexity</title><link href="https://shusei-e.github.io/natural%20language%20processing/perplexity/" rel="alternate" type="text/html" title="Perplexity" /><published>2017-06-17T00:00:00-04:00</published><updated>2017-06-17T00:00:00-04:00</updated><id>https://shusei-e.github.io/natural%20language%20processing/perplexity</id><content type="html" xml:base="https://shusei-e.github.io/natural%20language%20processing/perplexity/"><![CDATA[<script type="text/javascript" async="" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_CHTML">
</script>

<p>Perplexity is commonly used to evaluate language models.</p>

<h2 id="definition-and-calculation">Definition and Calculation</h2>

<p>First, we need to know</p>

<p><span style="font-size:1.0em; line-height:0%">
\(\begin{align}
&amp;\quad {\rm probability}\ p = \frac{1}{\rm choices}, \\
&amp;\Leftrightarrow {\rm choices}\ c = \frac{1}{p}.
\end{align}\)
</span></p>

<p>Perplexity is the geometric mean of choices. \(N\) is the number of data, \(c\) is the number of choices.</p>

<p><span style="font-size:1.0em; line-height:0%">
\(\begin{align}
\left( \prod_{i=1}^{N} c_i \right)^{\frac{1}{N}} &amp;= \left( \prod_{i=1}^{N} \frac{1}{p_i} \right)^{\frac{1}{N}} \\[10pt]
&amp;= \exp \left( \log \left( \prod_{i=1}^{N} \frac{1}{p_i} \right)^{\frac{1}{N}} \right) \\[10pt]
&amp;= \exp \left( \dfrac{\sum_{i=1}^N -(\log p_i)}{N} \right) \\[10pt]
&amp;= \exp \left( \frac{-{\rm loglik}}{N} \right)
\end{align}\)
</span></p>

<p>If perplexity becomes negative, you might need to take into account normalization constants. If you calculate the perplexity right after you initialize the model (randomly fill parameters), perplexity could be greater than the number of unique words in the corpus.</p>

<h2 id="explanation">Explanation</h2>
<p>Ideally, we want to know \(p(w)\), but we need to consider the complete data log-likelihood \(p(w,z)\). So, we take</p>

<p><span style="font-size:1.0em; line-height:0%">
\(\begin{align}
&amp;\sum_z p(w,z) \approx \frac{1}{S} \sum_{s=1}^S p(w, z(s))
\end{align}\)
</span></p>

<p>\(S\) is the number of simulation after enough number of iterations. \(z(s)\) is the value of latent variable under \(s^{\rm th}\) simulation. If we take the mean of perplexity, it could be an approximation of all possible \(z\).</p>

<h2 id="test-perplexity">Test Perplexity</h2>
<p>\(\begin{align}
p(\mathbf{w}^{\rm Test} | \mathbf{w}^{\rm Train}) = \int p(\mathbf{w}^{\rm Test} | \theta) p(\theta | \mathbf{w}^{\rm Train}) d\theta
\end{align}\)</p>

<p>This is a weighted average by the trained parameters. In the following example, we consider three topics.</p>

<table>
  <thead>
    <tr>
      <th>Topics \(p(z)\)</th>
      <th>\(p(w|z)\)</th>
      <th>\(p(w,z)\)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>\(p(z=1)=0.5\)</td>
      <td>\(0.05\)</td>
      <td>\(0.025\)</td>
    </tr>
    <tr>
      <td>\(p(z=2)=0.2\)</td>
      <td>\(0.03\)</td>
      <td>\(0.006\)</td>
    </tr>
    <tr>
      <td>\(p(z=3)=0.1\)</td>
      <td>\(0.01\)</td>
      <td>\(0.001\)</td>
    </tr>
  </tbody>
</table>

<p>We sum up \(p(w,z)\).</p>]]></content><author><name>Shusei Eshima</name></author><category term="Natural Language Processing" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Log Likelihood of LDA in CGS</title><link href="https://shusei-e.github.io/natural%20language%20processing/LDA-CGS-loglikelihood/" rel="alternate" type="text/html" title="Log Likelihood of LDA in CGS" /><published>2017-05-14T00:00:00-04:00</published><updated>2017-05-14T00:00:00-04:00</updated><id>https://shusei-e.github.io/natural%20language%20processing/LDA-CGS-loglikelihood</id><content type="html" xml:base="https://shusei-e.github.io/natural%20language%20processing/LDA-CGS-loglikelihood/"><![CDATA[<script type="text/javascript" async="" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_CHTML">
</script>

<p>Log likelihood of Latent Dirichlet in Collapsed Gibbs Sampling.</p>

<p>We want to calculate</p>

<p><span style="font-size:1.0em; line-height:0%">
\(\begin{align}
p(\mathbf{w} | \boldsymbol{\alpha}, \boldsymbol{\beta}) = \sum_{\mathbf{z}} \int  \underbrace{p(w_{d,i} | \boldsymbol{\phi})}_{\phi_{k,v}} p(\boldsymbol{\phi} | \boldsymbol{\beta}) d \boldsymbol{\phi} \int  \underbrace{p(z_{d,i} | \boldsymbol{\theta})}_{\theta_{d,k}} p(\theta_{d,k} | \boldsymbol{\alpha}) d \boldsymbol{\theta}.
\end{align}\)
</span></p>

<p>Recall (49) and (50) in <a href="https://tminka.github.io/papers/dirichlet/minka-dirichlet.pdf">Minka, T. (2000). Estimating a Dirichlet distribution</a>. \(\boldsymbol{\alpha}\) is a Dirichlet parameter and \(\mathbf{p}\) is drawn. Then a \(\mathbf{x}\) is drawn from a multinomial with probability vector \(\mathbf{p}\). \(n_k\) is the number of times the outcome is \(k\).</p>

<p><span style="font-size:1.0em; line-height:0%">
\(\begin{align}
p(\mathbf{x} | \boldsymbol{\alpha}) &amp;= \int_{\mathbf{p}} p(\mathbf{x} | \mathbf{p} ) p(\mathbf{p} | \boldsymbol{\alpha}) d\mathbf{p} \\[10pt]
&amp;= \frac{\Gamma(\sum_k \alpha_k) }{\Gamma(\sum_k n_k + \alpha_k)} \prod_k \frac{\Gamma(n_k + \alpha_k)}{\Gamma(\alpha_k)} \\[12pt]
n_k &amp;= \sum_j \delta(x_j = k)
\end{align}\)
</span></p>

<p><span style="font-size:1.0em; line-height:0%">
\(\begin{align}
p(\mathbf{w} | \boldsymbol{\alpha}, \boldsymbol{\beta}) &amp;= \prod_k \left[ \frac{\Gamma(\sum_v \beta_v) }{\Gamma(\sum_v n_{k,v} + \beta_v)} \prod_v \frac{\Gamma(n_{k,v} + \beta_v)}{\Gamma(\beta_v)} \right] \\[10pt] 
&amp;\qquad \times \prod_d \left[ \frac{\Gamma(\sum_k \alpha_k) }{\Gamma(\sum_k n_{d,k} + \alpha_k)} \prod_k \frac{\Gamma(n_{d,k} + \alpha_k)}{\Gamma(\alpha_k)} \right]
\end{align}\)
</span></p>

<p>Now we take log so that we get log likelihood.</p>

<p>Code for C++:</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="nf">llik</span><span class="p">(</span><span class="n">DATA_STRUCT</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="n">Parameters</span> <span class="o">*</span><span class="n">parameters</span><span class="p">){</span>
  <span class="kt">int</span> <span class="n">V</span> <span class="o">=</span> <span class="n">parameters</span> <span class="o">-&gt;</span> <span class="n">V</span><span class="p">;</span> <span class="c1">// number of unique words</span>
  <span class="kt">int</span> <span class="n">M</span> <span class="o">=</span> <span class="n">parameters</span> <span class="o">-&gt;</span> <span class="n">M</span><span class="p">;</span> <span class="c1">// number of documents</span>

  <span class="kt">double</span> <span class="n">polyaw</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">K</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">){</span>
    <span class="kt">double</span> <span class="n">nw</span> <span class="o">=</span> <span class="n">parameters</span> <span class="o">-&gt;</span> <span class="n">Nkv</span><span class="p">.</span><span class="n">row</span><span class="p">(</span><span class="n">k</span><span class="p">).</span><span class="n">sum</span><span class="p">();</span>
    <span class="n">polyaw</span> <span class="o">+=</span> <span class="n">lgamma</span><span class="p">(</span><span class="n">V</span><span class="o">*</span><span class="n">beta</span><span class="p">)</span> <span class="o">-</span> <span class="n">lgamma</span><span class="p">(</span><span class="n">V</span><span class="o">*</span><span class="n">beta</span> <span class="o">+</span> <span class="n">nw</span><span class="p">);</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">v</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">v</span><span class="o">&lt;</span><span class="n">V</span><span class="p">;</span> <span class="n">v</span><span class="o">++</span><span class="p">){</span>
      <span class="n">polyaw</span> <span class="o">+=</span> <span class="n">lgamma</span><span class="p">(</span> <span class="p">(</span><span class="n">parameters</span> <span class="o">-&gt;</span> <span class="n">Nkv</span><span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="p">))</span> <span class="o">+</span> <span class="n">beta</span><span class="p">)</span> <span class="o">-</span> <span class="n">lgamma</span><span class="p">(</span><span class="n">beta</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="kt">double</span> <span class="n">polyad</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">d</span><span class="o">&lt;</span><span class="n">M</span><span class="p">;</span> <span class="n">d</span><span class="o">++</span><span class="p">){</span>
    <span class="kt">double</span> <span class="n">nd</span> <span class="o">=</span> <span class="n">parameters</span> <span class="o">-&gt;</span> <span class="n">Ndk</span><span class="p">.</span><span class="n">row</span><span class="p">(</span><span class="n">d</span><span class="p">).</span><span class="n">sum</span><span class="p">();</span>
    <span class="n">polyad</span> <span class="o">+=</span> <span class="n">lgamma</span><span class="p">(</span> <span class="n">K</span><span class="o">*</span><span class="n">alpha</span> <span class="p">)</span> <span class="o">-</span> <span class="n">lgamma</span><span class="p">(</span><span class="n">K</span><span class="o">*</span><span class="n">alpha</span> <span class="o">+</span> <span class="n">nd</span><span class="p">);</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">K</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">){</span>
      <span class="n">polyad</span> <span class="o">+=</span> <span class="n">lgamma</span><span class="p">(</span> <span class="p">(</span><span class="n">parameters</span> <span class="o">-&gt;</span> <span class="n">Ndk</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="n">k</span><span class="p">))</span> <span class="o">+</span> <span class="n">alpha</span> <span class="p">)</span> <span class="o">-</span> <span class="n">lgamma</span><span class="p">(</span><span class="n">alpha</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="kt">double</span> <span class="n">llik</span> <span class="o">=</span> <span class="n">polyad</span> <span class="o">+</span> <span class="n">polyaw</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">llik</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We need to use Polya distribution, because in LDA model,</p>

<p><span style="font-size:1.0em; line-height:0%">
\(\begin{align}
p(z_1, z_2, \cdots, z_N | \alpha) \neq \prod_{n=1}^N p(z_n | \alpha)
\end{align}\)
</span></p>

<p>More specifically if we observe two or more \(z\), they are not independent each other.</p>

<p><span style="font-size:1.0em; line-height:0%">
\(\begin{align}
p(z_1, z_2 | \alpha) = p(z_2 | z_1, \alpha) p(z_1 | \alpha)
\end{align}\)
</span></p>

<p>In language, if we observe a certain topic (or a word) in a document, it is likely that we observe the same topic (word) again in the document (Polya’s Urn).</p>]]></content><author><name>Shusei Eshima</name></author><category term="Natural Language Processing" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Another view of Sigmoid function</title><link href="https://shusei-e.github.io/machine%20learning/another-view-of-sigmoid/" rel="alternate" type="text/html" title="Another view of Sigmoid function" /><published>2017-05-13T00:00:00-04:00</published><updated>2017-05-13T00:00:00-04:00</updated><id>https://shusei-e.github.io/machine%20learning/another-view-of-sigmoid</id><content type="html" xml:base="https://shusei-e.github.io/machine%20learning/another-view-of-sigmoid/"><![CDATA[<script type="text/javascript" async="" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_CHTML">
</script>

<p>Sigmoid function (standard logistic function) is defined as</p>

<p><span style="font-size:0.9em; line-height:0%">
\(\begin{align}
\sigma (x) = \frac{1}{1 + e^{-x}}.
\end{align}\)
</span></p>

<p>Now, let’s show \(1- \sigma (x) = \sigma(-x)\).</p>

<p><span style="font-size:0.9em; line-height:0%">
\(\begin{align}
1 - \frac{1}{1 + e^{-x}} &amp;= \frac{1 + e^{-x} - 1}{1 + e^{-x}}\\[10pt]
												 &amp;= \frac{e^{-x} \cdot e^{x}}{(1 + e^{-x})e^{x}}\\[10pt]
												 &amp;= \frac{1}{1 + e^{x}}
\end{align}\)
</span></p>

<p><img src="/assets/images/posts/sigmoid_another_view.png" width="560" /></p>

<p>Code for the figure:</p>
<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sigmoid</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="k">function</span><span class="p">(</span><span class="n">x</span><span class="p">){</span><span class="w">
	</span><span class="n">return</span><span class="w"> </span><span class="p">(</span><span class="m">1</span><span class="o">/</span><span class="p">(</span><span class="m">1</span><span class="o">+</span><span class="nf">exp</span><span class="p">(</span><span class="o">-</span><span class="n">x</span><span class="p">)))</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="n">x</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.matrix</span><span class="p">(</span><span class="n">seq</span><span class="p">(</span><span class="m">-6</span><span class="p">,</span><span class="w"> </span><span class="m">6</span><span class="p">,</span><span class="w"> </span><span class="m">0.01</span><span class="p">))</span><span class="w">
</span><span class="n">y</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">apply</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="n">sigmoid</span><span class="p">)</span><span class="w">
</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="w"> </span><span class="n">y</span><span class="p">,</span><span class="w"> </span><span class="n">type</span><span class="o">=</span><span class="s1">'l'</span><span class="p">)</span><span class="w">
</span><span class="n">abline</span><span class="p">(</span><span class="n">v</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">0</span><span class="p">)</span><span class="w">
</span><span class="n">lines</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">-2</span><span class="p">,</span><span class="w"> </span><span class="m">0</span><span class="p">),</span><span class="w"> </span><span class="n">y</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="n">sigmoid</span><span class="p">(</span><span class="m">-2</span><span class="p">),</span><span class="w"> </span><span class="n">sigmoid</span><span class="p">(</span><span class="m">-2</span><span class="p">)),</span><span class="w"> </span><span class="n">lty</span><span class="o">=</span><span class="m">2</span><span class="p">,</span><span class="n">col</span><span class="o">=</span><span class="m">2</span><span class="p">,</span><span class="n">lwd</span><span class="o">=</span><span class="m">2</span><span class="p">)</span><span class="w">
</span><span class="n">lines</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">-2</span><span class="p">,</span><span class="m">-2</span><span class="p">),</span><span class="w"> </span><span class="n">y</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="n">sigmoid</span><span class="p">(</span><span class="m">-2</span><span class="p">)),</span><span class="w"> </span><span class="n">lty</span><span class="o">=</span><span class="m">2</span><span class="p">,</span><span class="n">col</span><span class="o">=</span><span class="m">2</span><span class="p">,</span><span class="n">lwd</span><span class="o">=</span><span class="m">2</span><span class="p">)</span><span class="w">
</span><span class="n">lines</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">2</span><span class="p">,</span><span class="w"> </span><span class="m">0</span><span class="p">),</span><span class="w"> </span><span class="n">y</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="n">sigmoid</span><span class="p">(</span><span class="m">2</span><span class="p">),</span><span class="w"> </span><span class="n">sigmoid</span><span class="p">(</span><span class="m">2</span><span class="p">)),</span><span class="w"> </span><span class="n">lty</span><span class="o">=</span><span class="m">2</span><span class="p">,</span><span class="n">col</span><span class="o">=</span><span class="m">4</span><span class="p">,</span><span class="n">lwd</span><span class="o">=</span><span class="m">2</span><span class="p">)</span><span class="w">
</span><span class="n">lines</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">2</span><span class="p">,</span><span class="m">2</span><span class="p">),</span><span class="w"> </span><span class="n">y</span><span class="o">=</span><span class="nf">c</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="w"> </span><span class="n">sigmoid</span><span class="p">(</span><span class="m">2</span><span class="p">)),</span><span class="w"> </span><span class="n">lty</span><span class="o">=</span><span class="m">2</span><span class="p">,</span><span class="n">col</span><span class="o">=</span><span class="m">4</span><span class="p">,</span><span class="n">lwd</span><span class="o">=</span><span class="m">2</span><span class="p">)</span><span class="w">
</span><span class="n">text</span><span class="p">(</span><span class="m">-0.5</span><span class="p">,</span><span class="w"> </span><span class="n">sigmoid</span><span class="p">(</span><span class="m">2</span><span class="p">),</span><span class="w"> </span><span class="nf">expression</span><span class="p">(</span><span class="n">sigma</span><span class="p">(</span><span class="m">2</span><span class="p">)))</span><span class="w">
</span><span class="n">text</span><span class="p">(</span><span class="m">1.25</span><span class="p">,</span><span class="w"> </span><span class="n">sigmoid</span><span class="p">(</span><span class="m">-2</span><span class="p">),</span><span class="w"> </span><span class="nf">expression</span><span class="p">(</span><span class="n">sigma</span><span class="p">(</span><span class="m">-2</span><span class="p">)</span><span class="o">==</span><span class="m">1</span><span class="o">-</span><span class="n">sigma</span><span class="p">(</span><span class="m">2</span><span class="p">)))</span><span class="w">
</span></code></pre></div></div>

<p>Note:</p>

<p><span style="font-size:0.9em; line-height:0%">
\(\begin{align}
{\rm logit}(p) &amp;= \log \left( \frac{p}{1-p} \right) = a \\[10pt]
{\rm logit}^{-1}(a) &amp;= \frac{\exp (a)}{\exp (a) + 1} = \frac{e^a \cdot e^{-a}}{(e^a + 1) \cdot e^{-a}} = \frac{1}{1 + e^{-a}} = p
\end{align}\)
</span></p>]]></content><author><name>Shusei Eshima</name></author><category term="Machine Learning" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Softmax without Overflow</title><link href="https://shusei-e.github.io/deep%20learning/softmax_without_overflow/" rel="alternate" type="text/html" title="Softmax without Overflow" /><published>2017-05-06T00:00:00-04:00</published><updated>2017-05-06T00:00:00-04:00</updated><id>https://shusei-e.github.io/deep%20learning/softmax_without_overflow</id><content type="html" xml:base="https://shusei-e.github.io/deep%20learning/softmax_without_overflow/"><![CDATA[<script type="text/javascript" async="" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_CHTML">
</script>

<p>Overflow problems are common in neural network-like structures.</p>

<p><span style="font-size:0.85em; line-height:0%">
\(S = \dfrac{e^{x - K}}{\sum_i e^{x - K}}\)
</span></p>

<p>The result is inveriant even if we add/subtract constant \(K\), because softmax function uses the sum of \(e\) to normalize the result. We need to choose \(K\). In the example below, \(K = \max (x)\) is used, but any number should be fine.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">softmax</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
  <span class="n">exp_x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">exp</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
  <span class="k">return</span> <span class="n">exp_x</span><span class="o">/</span><span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">exp_x</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">keepdims</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>
<p>will become</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">softmax</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="n">e</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">exp</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="n">np</span><span class="p">.</span><span class="nb">max</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
    <span class="k">if</span> <span class="n">e</span><span class="p">.</span><span class="n">ndim</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">e</span> <span class="o">/</span> <span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span> <span class="c1"># dim = 2
</span>        <span class="k">return</span> <span class="n">e</span> <span class="o">/</span> <span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">keepdims</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>
<p>You may need to use this <code class="language-plaintext highlighter-rouge">e = np.exp(x - np.max(x, axis=1)[:, np.newaxis])</code>.</p>

<p><br />
<a href="http://rodresearch.blogspot.jp/2011/08/avoiding-overflow-problem-in-softmax.html">Reference 1</a></p>]]></content><author><name>Shusei Eshima</name></author><category term="Deep Learning" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Use tanh instead of exp in sigmoid function</title><link href="https://shusei-e.github.io/machine%20learning/sigmoid_tanh/" rel="alternate" type="text/html" title="Use tanh instead of exp in sigmoid function" /><published>2017-04-20T00:00:00-04:00</published><updated>2017-04-20T00:00:00-04:00</updated><id>https://shusei-e.github.io/machine%20learning/sigmoid_tanh</id><content type="html" xml:base="https://shusei-e.github.io/machine%20learning/sigmoid_tanh/"><![CDATA[<script type="text/javascript" async="" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_CHTML">
</script>

<p>If the data is large, we encounter overflow in sigmoid function.</p>

<p><span style="font-size:0.85em; line-height:0%">
\(f(x) = \dfrac{1}{1 + e^{-ax}}  \ (a&gt;0)\)
</span></p>

<p>A simple trick to avoid overflow is to use tanh.</p>

<p><span style="font-size:0.85em; line-height:0%">
\(\dfrac{1}{1+e^{-ax}}=\dfrac{1}{2}\dfrac{2e^{\frac{1}{2}ax}}{e^{\frac{1}{2}ax}+e^{-\frac{1}{2}ax}} 
=\dfrac{1}{2}(1+\tanh(\frac{1}{2}ax))\)
</span></p>

<p>In your code,</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">y</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">numpy</span><span class="p">.</span><span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">x</span><span class="p">))</span>
</code></pre></div></div>
<p>will become</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">y</span> <span class="o">=</span> <span class="n">numpy</span><span class="p">.</span><span class="n">tanh</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="mf">0.5</span><span class="p">)</span> <span class="o">*</span> <span class="mf">0.5</span> <span class="o">+</span> <span class="mf">0.5</span>
</code></pre></div></div>

<p><br />
<a href="https://github.com/pfnet/chainer/pull/1047">Reference 1</a><br />
<a href="http://mathtrain.jp/sigmoid">Reference 2</a></p>]]></content><author><name>Shusei Eshima</name></author><category term="Machine Learning" /><summary type="html"><![CDATA[]]></summary></entry></feed>