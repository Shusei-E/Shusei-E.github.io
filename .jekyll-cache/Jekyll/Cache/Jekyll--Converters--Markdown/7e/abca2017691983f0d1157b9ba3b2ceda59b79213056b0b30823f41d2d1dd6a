I"^<p>We sometimes encounter the calculation of</p>

<p><span style="font-size:1.0em; line-height:0%">
<script type="math/tex">\newcommand{\Ga}{\Gamma}
\begin{align}
\log \frac{\Ga (\alpha + n)}{\Ga (\alpha)}.
\end{align}</script>
</span></p>

<p>If <script type="math/tex">n</script> is small, there is a faster calculation. We use the property of Gamma function, <script type="math/tex">\Gamma(x+1) = x \Gamma (x)</script>.</p>

<p><span style="font-size:1.0em; line-height:0%">
<script type="math/tex">% <![CDATA[
\newcommand{\Ga}{\Gamma}
\begin{align}
&\quad \log \frac{\Ga (\alpha + n)}{\Ga (\alpha)} \\
&= \log \frac{(\alpha + n - 1) \Ga (\alpha + n - 1)}{\Ga (\alpha)} \\
&= \log \frac{(\alpha + n -1) (\alpha + n -2) \Ga (\alpha + n -2) }{\Ga (\alpha)} \\
&= \log \frac{(\alpha + n -1) (\alpha + n -2) \cdots (\alpha) \Ga (\alpha)}{\Ga (\alpha)} \\
&= \log (\alpha + n -1) (\alpha + n -2) \cdots (\alpha)\\
&= \log \prod_{m=1}^{n} (\alpha + n - m)
\end{align} %]]></script>
</span></p>

<p>Example code in Cython:</p>
<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cdef</span> <span class="n">extern</span> <span class="k">from</span> <span class="s">"math.h"</span><span class="p">:</span>
   <span class="n">double</span> <span class="n">log</span> <span class="p">(</span><span class="n">double</span> <span class="n">x</span><span class="p">)</span>
   <span class="n">double</span> <span class="n">lgamma</span> <span class="p">(</span><span class="n">double</span> <span class="n">x</span><span class="p">)</span>

<span class="n">cdef</span> <span class="n">double</span> <span class="n">gammaln_sum</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">[</span><span class="n">ftype_t</span><span class="p">,</span> <span class="n">ndim</span><span class="o">=</span><span class="mi">1</span><span class="p">]</span> <span class="n">array1</span><span class="p">,</span>
                        <span class="n">np</span><span class="o">.</span><span class="n">ndarray</span><span class="p">[</span><span class="n">ftype_t</span><span class="p">,</span> <span class="n">ndim</span><span class="o">=</span><span class="mi">1</span><span class="p">]</span> <span class="n">array2</span><span class="p">):</span>
    <span class="c1"># (special.gammaln( alpha_s + n_s_temp ) - special.gammaln( alpha_s )).sum()
</span>    <span class="n">cdef</span> <span class="n">double</span> <span class="n">value</span> <span class="o">=</span> <span class="mf">0.0</span>
    <span class="n">cdef</span> <span class="nb">int</span> <span class="n">i</span>
    <span class="n">cdef</span> <span class="nb">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">array1</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="c1"># length of array
</span>    <span class="n">cdef</span> <span class="nb">int</span> <span class="n">m</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">array2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">18</span><span class="p">:</span>
            <span class="c1"># low frequency words
</span>            <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">array2</span><span class="p">[</span><span class="n">i</span><span class="p">])):</span>
                <span class="n">value</span> <span class="o">+=</span> <span class="n">log</span><span class="p">(</span><span class="n">array1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">m</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">value</span> <span class="o">+=</span> <span class="n">lgamma</span><span class="p">(</span><span class="n">array1</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">-</span> <span class="n">lgamma</span><span class="p">(</span><span class="n">array2</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>

    <span class="k">return</span> <span class="n">value</span>
</code></pre></div></div>

<p>In C++:</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="n">CstmCpp</span><span class="o">::</span><span class="n">calc_loglik_doc_second_term</span><span class="p">(</span><span class="kt">int</span> <span class="o">&amp;</span><span class="n">doc_id</span><span class="p">,</span> <span class="kt">int</span> <span class="o">&amp;</span><span class="n">word_id</span><span class="p">,</span> <span class="n">SparseVector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">n_k_doc</span><span class="p">){</span>
  <span class="c1">// compute_second_term_of_log_probability_document</span>
  
  <span class="kt">double</span> <span class="n">alpha_k</span> <span class="o">=</span> <span class="n">calc_alpha_word_given_doc</span><span class="p">(</span><span class="n">doc_id</span><span class="p">,</span> <span class="n">word_id</span><span class="p">);</span>
  <span class="kt">int</span> <span class="n">n_k_w</span> <span class="o">=</span> <span class="n">n_k_doc</span><span class="p">.</span><span class="n">coeffRef</span><span class="p">(</span><span class="n">word_id</span><span class="p">);</span> <span class="c1">// get_word_count_in_doc()</span>

  <span class="k">if</span><span class="p">(</span><span class="n">n_k_w</span> <span class="o">&gt;</span> <span class="mi">18</span><span class="p">){</span>
    <span class="k">return</span> <span class="n">lgamma</span><span class="p">(</span><span class="n">alpha_k</span> <span class="o">+</span> <span class="n">n_k_w</span><span class="p">)</span> <span class="o">-</span> <span class="n">lgamma</span><span class="p">(</span><span class="n">alpha_k</span><span class="p">);</span>
  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="kt">double</span> <span class="n">temp</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n_k_w</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
      <span class="n">temp</span> <span class="o">+=</span> <span class="n">log</span><span class="p">(</span><span class="n">alpha_k</span> <span class="o">+</span> <span class="n">i</span><span class="p">);</span> 
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">temp</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

:ET